#!/usr/bin/env python2

import gevent.monkey
gevent.monkey.patch_all()

import gevent

import argparse
import logging
import logging.handlers
import socket
import signal

from sleepproxy import mdns, dnsserve, manager

class MultilineSysLogHandler(logging.handlers.SysLogHandler):
    def emit(self, record):
        lines = record.getMessage().split('\n')
        for l in lines:
           record.msg = l
           super(MultilineSysLogHandler,self).emit(record)

def glisten(bindaddr):
    # TODO: support systemd socket activation
    logging.warning("listening for SleepProxyServer requests on UDP:[%s]:3535" % bindaddr)
    return dnsserve.SleepProxyServer((bindaddr, 3535))

anyaddr = ['0.0.0.0']
if socket.has_ipv6: anyaddr.append('::')

parser = argparse.ArgumentParser(description='Sleep Proxy Server for Macs: http://github.com/kfix/SleepProxyServer')
parser.add_argument('--verbose', action='store_true', help='Run with verbose logging')
parser.add_argument('--bind', nargs='*', default=anyaddr, help='IP address[es] to listen for sleeper registrations')
args = parser.parse_args()

logfmt = 'sleepproxyd[%(process)d/%(threadName)s@%(module)s:%(levelname)s] %(message)s' #http://docs.python.org/2/library/logging.html#logrecord-attributes

if args.verbose:
    logging.basicConfig(format=logfmt + ' --(%(pathname)s:%(lineno)d)--', level=logging.DEBUG)
else:
    logging.basicConfig(format=logfmt, level=logging.WARNING)

syslog=MultilineSysLogHandler(address='/dev/log') #post messages to syslog in addition to stdout
syslog.setFormatter(logging.Formatter(logfmt))
logging.getLogger().addHandler(syslog)
#doesn't syslog exceptions...need systemd for that

signal.signal(signal.SIGUSR1, manager.print_hosts)
signal.signal(signal.SIGHUP, manager.advertise)
manager.advertise()
greenlets = [gevent.spawn(glisten(ip).serve_forever) for ip in args.bind]
gevent.joinall(greenlets) #loops forever here
